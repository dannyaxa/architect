package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _template_formation_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\xdf\x57\xe3\x36\xf6\x7f\xe7\xaf\xf0\xf1\x53\xbf\x3d\x03\x24\xa1\x33\xed\x37\x6f\x21\xa1\x90\x2d\x4c\x39\x04\xa6\xe7\x2c\xf0\x20\x6c\x85\x68\x71\x24\x1f\xd9\x86\xa6\x1c\xfe\xf7\xbd\x57\xf2\x0f\xc9\x96\x9d\xc0\x64\x67\x78\x98\xed\xb6\x33\xb1\xaf\x74\x3f\xf7\xa7\xae\xa4\xeb\xe7\x67\x2f\xa4\x73\xc6\xa9\xe7\x93\x38\xf6\xbd\x97\x97\x1d\xcf\x7b\x86\x7f\x3d\xcf\x1f\xfd\x35\xbb\xa4\xcb\x38\x22\x29\xfd\x5d\xc8\x25\x49\xbf\x50\x99\x30\xc1\x7d\x6f\xe8\xf9\x83\x5e\xbf\xb7\xdb\xfb\x7f\xf8\xbf\xff\x41\x93\x9f\x13\x49\x96\x34\x05\x1a\x24\xd0\x73\xc0\x5c\xcf\x9e\x24\xfc\x9e\x7a\x7b\xe7\x52\x04\x34\x49\x68\xa2\x99\xe8\xff\xf9\xf0\x3e\x8b\x63\x2a\xbd\xbd\xcf\x30\x1a\x5e\x8d\xc5\x72\x49\x78\xe8\x57\x53\x28\xba\xcb\x55\x4c\x15\xe3\x59\x2a\x19\xbf\xcf\x99\xe6\x2f\x27\x74\x4e\xb2\x28\x55\xef\xeb\x6f\x92\x40\xb2\x38\x2d\x60\xff\xf9\x48\xa5\x64\x21\xf5\xd2\x05\x45\xc9\x71\x98\x17\x68\x96\xde\x5c\x48\xf5\x1c\x30\x15\x68\xbc\x58\xa3\xf6\xcb\x49\x5f\x3e\x74\x80\x3f\x17\x32\x4d\x5a\xa1\x2b\xd1\x26\x34\x62\x4b\x96\xd2\xf0\x94\x25\xe9\x5b\xc5\x40\x3e\xde\x12\x2c\x06\xaa\x48\x14\xee\xb7\x63\x9e\x05\x24\xa2\xad\x98\x3f\x67\xcb\x3b\x2a\xdb\x71\xf6\xbb\x81\xea\xe1\x9e\x98\xbb\x00\x82\x2b\xa4\xc2\x93\x19\xdf\x14\x29\xfb\xa7\x1d\xe8\x3a\xbf\x48\x07\x7b\x4b\x16\x48\xd1\x8d\x17\x59\x20\x5a\xc6\x93\x94\xf0\x80\x22\xc0\x2c\xa1\x96\x8a\x0d\xfc\x0e\xe0\x40\x45\xc1\x97\x4a\x1f\xf7\x47\x67\x53\x0b\x74\x07\xe4\x36\x0f\x68\xc0\x1c\xc5\x71\xc4\x02\x82\xbf\x3d\x9c\x7f\xa7\x06\xc2\x1f\x45\x91\x78\x9a\xcd\x4e\x7e\x97\x62\xf9\x26\xee\xbd\x3d\xf5\xcf\x7e\xaf\x13\x06\x72\xf1\x80\x8d\x87\x7c\xbc\x9f\xc6\xd3\xc9\x85\xc7\x45\xaa\x80\xfd\x9f\x03\xd5\x23\x61\x11\xb9\x63\x11\x4b\x57\xff\x16\x9c\x26\x2d\xd0\x3a\x03\x65\x73\x25\x19\xdc\x3c\xc5\xce\xfb\x29\x89\x69\xc0\xe6\x2b\xef\xc0\x81\xee\x88\x3f\x32\x29\xf8\x92\xf2\xd4\xcc\x60\xdb\xb1\x98\x31\xb9\x77\x75\x71\xda\xe4\x7e\x41\x23\x4a\x12\xba\x7d\xce\xe3\x4c\x4a\xe4\x5a\x30\x70\x70\x8e\x45\xc2\x52\x21\x57\xdb\x67\x3e\x13\x99\x84\x28\x0a\x04\xa4\x5c\x59\xf1\x69\x60\x00\x1f\xfa\x83\xae\x1c\xee\x30\x54\xeb\xd0\x70\x78\x34\x1e\x0c\x87\x40\x72\x4e\x98\x54\x7f\xc1\x48\xec\xe2\x0c\x24\x1e\xc7\xbc\x81\xa1\x8b\x2e\x4a\x02\x33\x29\xea\xf0\xcc\x01\x80\x0a\x12\x05\xd4\x74\x48\xff\x10\xb4\x75\x2a\xee\x8f\xa5\xc8\xe2\x0e\x64\x40\x92\xa8\xff\x6a\x42\x03\x12\xac\x78\x90\xbe\x52\x46\x1b\x4b\xc2\x05\xac\x93\x1c\xa1\x4e\xf9\x84\xac\xf0\xf5\xaf\x55\x26\xa9\x94\x53\xa5\x94\x34\x5f\x88\xd5\x32\xbd\xcb\x69\xfa\x24\xe4\x83\xef\xed\x61\x9e\xe9\x5c\x69\xed\xc1\xc5\xca\xa0\x06\x1a\xa9\xaa\x8d\x11\xe3\x73\x49\x92\x54\x66\x41\x9a\x49\x9a\xf3\x33\x15\xf7\x67\x96\xc6\x99\xb5\xe4\xf9\x25\x77\x5b\x67\x5f\x48\x94\x29\xa5\x01\x93\x1c\x06\x9a\x30\xb1\xe1\xfa\x2e\xe1\x37\x15\x6b\x57\x28\x34\x75\xe9\xbc\x1d\xd3\xa2\x33\x1a\x64\x12\x32\x82\xc3\xac\x05\xc4\x67\x34\xd0\x1c\xb1\x36\x07\x54\xe6\xd9\x29\xfe\xfb\xb2\x63\x28\xd2\x2e\xa8\x2a\x4b\x29\xbd\xa9\xf9\xbe\xc4\x41\xc9\xd6\xe1\xe3\x5f\xce\xc7\x65\x45\xe5\xf2\x1f\x7f\xcc\x42\x79\x18\x89\xe0\x01\xc7\xf5\x8b\x3c\xdd\xff\x54\x7a\x9e\x3f\xcd\x17\xaf\x4b\xca\xe1\x0f\x8c\x2a\x3f\x2f\x75\x2a\x9a\x4b\x72\x8f\xb3\x5e\x97\xd2\x3f\xab\x90\x41\x5a\x1d\x59\x2e\x75\x28\x94\xb3\x94\x04\x0f\x8a\xc6\x7b\x29\xb5\x71\x5b\x69\x43\x59\x4e\x49\x7a\x0c\xc6\x79\x22\xab\x2e\x69\xa7\x1c\x0a\x46\x50\x52\x41\xda\x2e\x79\x3e\xb7\x3d\xf5\x28\x05\x30\x0b\x95\xb1\xbb\x55\xda\xa4\xef\xd4\x71\x0d\xd6\x34\x6c\x78\x45\x01\xd8\xc8\x61\x60\x58\x07\x21\x9a\xdb\x74\x96\x4a\x3d\xb3\xec\x0e\x58\xf4\xba\x90\x6b\x92\x6e\xac\xf5\x45\x55\x23\xf8\x9d\xc3\x68\xc8\xf8\x01\x6a\xe6\x1a\xd6\x73\xb0\xa8\x61\xc8\xc6\x42\x0c\xb6\xbc\x35\x64\x69\x3a\x59\x1f\x9c\x6c\xf0\x8b\xff\x6a\x69\x2d\x61\xfb\xdf\x46\xd8\xfe\xd7\x0a\x3b\xd8\x86\xb0\x83\x6f\x23\xec\xe0\x6b\x85\x3d\x78\xa3\xb0\x85\xb4\x17\x90\x76\x0d\xe0\x0e\x61\x15\xc5\x25\xb9\x8b\x68\xb7\xc0\xaf\x54\xb3\x9a\xb6\xa8\x44\xd6\xb1\xef\xe6\x0c\xd5\x43\xca\xb8\xaa\x5b\x2d\x05\x35\xcb\x60\xff\x55\x39\xa1\x92\xdc\x41\x9f\x2b\xae\xc3\x85\x7a\xeb\x75\xab\x09\x2b\x3e\xa3\x24\x11\x01\x53\x92\x74\x8b\xac\x07\x3a\x60\x15\x79\x69\x7b\x62\xf4\xbf\x9f\x18\xfd\x2d\x8a\x31\xf8\x7e\x62\x0c\xbe\x4e\x8c\x9d\xce\xe2\xc7\x25\x87\x45\xd8\x89\x5c\x91\x98\xd5\xf7\xb0\xaa\x40\x92\x2a\x6c\xac\x19\xa7\xfc\x5e\x62\x1d\x5a\x2b\x40\xa6\x31\xb0\x48\x45\x20\x22\x9c\x24\x0d\x62\x2c\x43\x70\x6b\x89\xe7\x1d\xf8\x68\x80\xc9\xce\xbf\x14\xf6\x6f\x8c\xd8\x69\x6c\x57\x2a\xe6\xfe\x17\xeb\x94\x0f\xaf\xe2\xd3\xb3\xd9\x7c\xfa\xf8\xf1\xe0\xa3\xc5\xa9\x2a\xbc\x7e\xab\x4a\xc2\xdb\x57\xa7\xd0\xf6\xc2\xb1\x5e\x79\x57\xf5\xe3\x8c\xa6\x29\x1e\xfb\xb4\x98\x6f\x76\x30\x1c\x1e\x66\xc1\xc3\xda\xc5\x45\x6d\x87\xc6\x82\xa7\x52\xab\xe1\x5c\xb2\x47\x92\x52\x63\x1d\xd0\xc7\x7d\xc0\x0b\xa8\xe6\xec\x3e\x93\x24\xb7\xaf\x51\x33\x43\x35\x98\x66\x38\x31\xec\x70\xd1\x23\xc3\xe6\xde\xae\xa3\xd4\x4c\x56\x09\x54\xf1\x66\xb1\xe9\x07\x82\x3f\x8a\xbf\xfd\x9a\xc5\x72\x7a\x3c\xa3\xfc\x9a\xca\x54\x3f\x2a\x34\x39\x59\xc1\x06\x51\x1c\x66\x2c\x0a\xdb\xb4\xa9\x49\x26\x87\xc3\xe1\x06\xcb\x97\x22\x51\xfc\xcb\x85\xfa\x5f\x82\x71\xbd\x4c\xef\x02\xf0\xeb\x2e\xc4\x20\xd7\x9d\x86\x02\xeb\xb5\xb9\x62\x43\xd1\x2a\xd9\x9d\x5e\xea\x18\x67\x68\x83\x86\x3e\x4b\x9a\x9c\xbd\xcf\x42\x54\x54\xf9\xb8\x10\x6a\x56\x57\x6c\x63\x60\xae\xe2\x37\x8c\x0c\x24\x05\xff\x69\xe7\xdb\x88\x12\x30\xea\x2c\x58\xd0\x25\xd9\x50\x1a\xa0\x2f\xe6\x3b\x19\xcd\x4e\x5c\x53\x1e\x47\xe2\x8e\x44\x90\x6b\x04\x0f\x89\x5c\x4d\x79\x48\xff\x56\x46\xba\x36\x7c\x56\x3d\x35\xe4\xdd\x2b\x91\x57\x34\x6e\x6c\x9d\x2a\x6b\xc2\xfb\xb0\x66\xa0\xa1\x31\x63\xf0\xc5\xe8\xf3\xf1\x51\x25\x9c\x21\x9e\xf6\xbc\xff\x40\xe9\x57\x8f\x43\xeb\x4d\xe9\xc1\xa7\xa7\xee\x93\x55\x20\x7d\x64\x18\xdb\x34\xbc\x5c\x40\x3e\xbe\x5f\xe0\xb6\xb9\x71\x46\x41\xc2\x31\x89\x49\x00\x49\xfb\x0a\xdc\x4e\x05\xf9\x47\xfb\xf8\xf4\x2f\xc8\xe8\xd4\x41\x54\x71\x2d\xb2\x41\x65\xa2\xf5\xcc\xd7\xb3\x5e\xc7\xd8\xb5\x86\xeb\x50\x3e\xe2\x8f\xef\x22\xd4\x29\xe0\xd8\x46\x9c\xf3\x7c\xb3\xbe\xed\x88\x2b\xe6\xdd\x20\xe6\xbe\xaf\x41\xc7\x0b\x3c\x1d\x7a\x1f\xf9\x3b\xc8\xb1\x6c\xc3\xb0\xef\x32\x0f\x6f\x90\xe9\xde\x9c\xe7\xde\x8b\x43\x35\xcf\x2f\xbf\xa7\x4b\x55\x57\x4d\x3f\xb2\xc5\x16\x8c\x9b\x5f\x82\xbc\x0f\xdb\xca\x02\xcc\x8f\x82\xef\x47\xc1\xf7\xa3\xe0\xfb\xdf\x44\xfc\x8c\xca\x47\x16\xbc\x93\x88\x4f\x0a\x30\x3f\x92\xf9\x5b\x4c\xdb\x72\x5e\x52\xde\x6a\xea\xee\xa5\x67\x8f\xcd\xbd\xbd\x43\x12\xe1\x09\x94\x6c\xbd\x2c\xbc\xcb\x09\x5c\x97\xa1\xcd\xde\x93\x3f\x80\x53\xc2\xda\xbc\x28\x7f\x8b\xf6\x86\x08\x5f\xae\x39\xea\x5b\x10\x19\x8e\x45\xa6\x2e\xad\xfa\xa6\xe3\xee\x78\x6e\xa8\x8c\x2c\xa5\x88\x68\x75\xdf\xdb\xc4\x57\x9c\xb8\x01\xcb\x39\x33\xfa\x79\x6c\x9c\xd3\xd1\x19\xde\xb9\xd9\xa4\x9d\x60\xcf\x49\xba\xc0\xe1\xfb\xbe\x71\xfc\x18\xe9\x0c\x6b\x38\x7b\x13\x0f\x59\x5e\x28\xc8\x2f\xf5\x13\x98\x26\xed\x29\xc9\x78\xb0\x70\x1f\x32\xd9\xf8\x47\x59\x2a\xb0\x5f\x89\xf1\xfb\xe1\xd0\x35\xac\xfb\xc8\x2b\x3f\x8c\xa5\xe7\xd9\x5d\xc4\x82\x69\x3c\x0a\xc3\xfc\x18\x32\x95\x19\x2d\x05\x54\xa7\xff\x13\x8a\x91\x7a\x96\xf7\x58\x29\x71\xcd\xa8\xd1\xaf\x8b\x90\xd9\x0f\xe9\xe3\x7e\x12\x12\xbc\x78\xf2\x8f\xee\x12\x9d\x1f\xbe\x88\x28\x5b\xd2\xbc\x6b\xc9\xef\xab\x43\x45\xfd\xac\x10\x0a\x0d\x01\xcb\x56\x68\x1d\x58\x55\x0d\x29\x77\xc9\x9f\x71\xca\x96\x30\x01\x1e\x26\xce\x49\x94\x54\x20\x41\xc1\x0e\x9b\x77\x18\xa4\x46\x6c\x64\x9f\xe9\x92\xdc\xd7\x8f\x92\xb1\xab\xc8\x24\xc9\x47\x9f\x09\x8e\x1d\x1c\xd8\x0d\x52\x53\x5a\x79\xe9\xac\x45\xeb\x40\xa2\x14\x62\xcc\x5d\x34\x73\x98\x83\xf2\x7e\x10\xb3\x43\xc4\x3c\x3f\xae\xbb\x9f\xeb\x9e\xde\x50\xe4\x15\xe4\xdd\x09\x49\x31\xf5\x59\xf1\x95\xc1\xf3\x10\x9f\x1b\x8d\x0d\xed\x6e\x5a\x1d\x6a\x6f\xe0\x9c\xc6\x8f\xb6\x33\x74\xa3\xd9\xc6\x77\xf8\xb2\x5e\x35\x3a\x35\xe9\x8a\x80\x75\xed\x56\x9d\x37\x85\xd5\xd9\xef\xf9\x18\x9f\x4d\x43\x6c\x53\x99\x33\xc8\x92\xf5\x00\xe8\xbc\x30\x72\x53\xf4\xd7\x52\x0c\x5c\x8b\xcc\x58\x88\x28\x14\x4f\x98\x13\x3e\x96\x0f\x27\x90\x6f\x25\x2d\x57\x96\x35\x1e\xa7\x5a\x1c\x0d\xf1\xce\x18\xd7\x5e\x38\x34\x3b\x18\xfd\x33\xf2\x77\xf5\xb8\xba\xf2\x6b\xae\x28\xd5\xe2\x75\x2a\x48\x58\xbc\x50\xfd\x2c\xeb\x12\xe3\x61\xb9\xec\x18\x1e\xda\x68\x1a\x3c\xa1\x24\x4a\x17\xe3\x05\x0d\x1e\x0a\x1f\x3b\x1a\x0f\x2a\xa4\xc6\xfb\x63\x49\x20\xaa\xa9\x64\x02\x23\xf8\xa0\x57\x49\x43\x61\x61\x0f\x92\xb1\x88\xa2\xb2\x80\x54\xd0\x60\x04\xcf\x22\x22\xb5\xde\xfc\x3e\x68\x03\x2f\x48\xad\x90\x69\x1e\xda\x9b\x65\xa0\xd5\x29\x62\xbe\x30\x4e\xe6\x5f\x5f\x1d\x19\x2d\xa2\xb5\x02\xa9\x0c\x1d\x72\x0f\x81\x3b\x4a\xb5\xe3\xe7\x29\xa8\x51\x7b\xe6\x0b\x4e\x1e\x71\x57\x71\x88\x29\x5f\x40\xc6\x5f\x59\xab\x41\x15\xa1\xb0\x52\xe1\x1f\x9a\xd2\x2e\x5f\xc0\x25\x0e\x49\x1a\x2c\xf2\x2c\xde\x37\xea\x16\x50\x5b\x99\x12\xa6\x3c\xaf\x33\xcb\x25\xdd\xdb\xe4\xa6\xa7\x59\x8b\xe8\x7b\x9e\x56\xaf\xf9\x56\x17\x78\x66\xb7\x6e\xe9\xb1\xdb\xbd\xcb\xfb\xad\x76\xc9\xa6\x7f\x57\x37\x6c\xd5\xd5\xfb\x57\x5c\xb0\x75\xe9\xb2\x4d\x7d\x11\x49\x52\x16\x54\x81\xad\x8b\x0d\x23\xce\x37\xb9\xc9\x6d\xe8\xe3\x5b\xe6\x4b\xce\x75\xc0\x4f\x24\x61\x78\x7f\x57\x39\x7f\x75\x4d\x97\x2f\xdf\x20\x3c\x5b\x52\xa1\xaa\xf6\x4f\x3d\xb3\x4f\xa4\x9c\xc5\xbc\x70\x04\xbb\x86\x11\x6d\x1b\x22\x45\x92\xe4\x8d\x2a\x56\x6d\x60\x64\x2b\x3b\xba\xf4\x8b\x15\xec\x1d\x68\xb2\x80\x2c\x8f\xd2\x0d\xcc\xbd\x81\x6a\xc4\x7a\x24\x91\x99\xfb\x55\x76\x92\xf7\x54\x79\xcd\xc9\xe5\xe5\xf9\xf0\xa0\xd7\xeb\xed\x9b\xc3\x2a\x80\x07\xc6\xd3\x2b\xbe\x70\xf2\x2b\xe2\xb5\xc4\x7b\x7a\x08\x6b\xce\x03\xa3\x33\xf0\x83\x07\x2c\xed\x93\x52\x83\xd7\xcf\xd8\x7d\x8f\x3f\xca\xc3\x80\xb9\xda\xb2\x61\xb1\x52\xd9\xa0\xbe\x2c\x6c\x3f\x25\xfa\xd8\x16\x4d\x39\x7e\x6e\x51\xf3\x34\x33\xee\x50\x3d\x18\x56\x26\x1e\x3b\xe0\x8c\xba\xb0\x31\xaa\x7c\x97\x8f\x40\x3d\xbb\x3c\xae\xb3\x36\xdb\x30\x97\xd5\x37\x0a\xdd\x09\xb3\xdc\x11\xb5\xe4\xcb\x62\xfb\xd1\xb1\x0d\x52\xef\xd7\xed\x17\xa0\x56\x47\x3a\x6d\xf1\x89\x08\x32\xab\xd7\x50\xa7\xa2\xfc\xab\x98\xa1\xfa\x28\x66\xb0\xdb\xef\xed\xf6\x7f\x35\x9d\x11\xaf\xc8\x69\x3e\xce\x3a\x59\x32\xfe\x8e\xd5\xfe\x7c\xae\x7b\xba\x74\xf3\x82\xb5\xae\x2a\x88\x0c\x52\x51\xac\x42\xc1\x1e\xa9\x0c\x50\x2c\x3e\xe0\x57\x34\x18\xec\x91\x25\xf9\x47\x70\xf2\x94\xec\x05\xd8\x00\x71\x6b\x0d\x78\xa9\x4d\x3d\xaa\xaa\x03\xd8\x91\x24\xc3\x4a\x6e\x7b\xa4\x71\x40\xd5\x08\x19\xc7\x3e\x51\x29\x4d\xab\xb4\xa5\x8c\xb0\x03\xa9\x61\x44\xc3\x42\xd6\x00\xa7\x1d\x36\xb2\x45\xa7\x3d\xea\xf0\x72\xf2\x6e\xbb\x34\x14\x18\x61\x3b\xf8\xcf\xbe\x79\x86\x57\xd2\x15\x6d\xe6\x9a\x92\x48\x3e\x04\x0b\x0d\xf5\x08\xfc\xa7\x6e\xa8\x86\xa9\xb6\x01\xf0\x21\x3f\xab\x38\xcf\xd2\x0b\x1a\x08\xa9\x1a\x0e\xd6\x81\x6d\x24\x2f\x95\xbb\x4a\x11\x8a\x39\x51\x8a\x44\x1d\x81\xec\xdb\x5d\x89\x8e\xd4\xb6\xfb\x73\x9e\xd1\xbe\x85\xd0\x41\x24\xb2\xf0\x09\x0b\x39\x94\x5b\x57\xc6\x6a\x47\xb8\x81\x9d\x5c\x66\xb1\x7e\xbb\x63\xc4\xd9\x80\xd2\x9d\xd5\x8a\xfe\xf5\x96\x73\x2c\x9d\xab\x5a\xf3\xe9\x89\x48\xcc\x90\xa8\xd7\xe2\xc7\x34\x1d\xa5\x79\xcf\x68\x7b\x4d\x04\x86\x99\x7c\x9e\x69\x2b\xdd\x9a\x5f\x49\x54\xc8\xdd\x32\x54\x7b\x69\xf3\x1b\x42\x64\x8c\xe5\xca\xa7\x5f\x4c\x64\xb6\x2b\xdd\x70\x74\xa6\x2a\x5f\x3e\xfb\x56\xd1\xe3\xf2\x3b\xcf\xbb\xc1\x43\xf8\x1b\x78\x76\xe3\xaf\xf5\xb4\x1b\xff\x43\x63\x3f\xa1\xa6\xc8\xf5\xae\xa7\x31\x96\x5a\x1c\xb0\x11\x86\xfc\xcb\x41\x07\x8e\xd6\xef\x1a\x5b\x11\x75\xb0\xa1\xfc\xd1\xc1\xc2\xfa\x5e\xa9\x53\x4e\xcc\x30\x38\xc1\x46\x9a\xc5\x01\x79\x3c\x6f\x22\x57\x71\x30\xfa\x7a\xb9\x94\x02\xcb\xb8\x74\xf0\xb2\x3e\xc0\xc9\xe7\x77\x09\xf8\x62\x5a\x4b\x1b\x16\xbf\xc3\xc4\x19\xaf\x37\x95\x58\x33\xae\x39\xa6\xff\xe1\x86\x9b\xaf\xdb\x74\xa0\x3f\xfb\xcc\x1b\xad\xdb\x50\xde\x36\x50\x16\xb7\x01\x75\xd3\xe4\x90\x2e\xae\x3e\x5f\x4e\xcf\x8e\xb4\x62\x74\x5b\xdc\x8d\x6f\x93\xbd\x98\x3f\xcb\x8f\x67\x6e\xcd\x9c\x63\x84\xeb\x7f\x03\x00\x00\xff\xff\x80\x6a\x84\x01\xed\x3b\x00\x00")

func template_formation_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_template_formation_tmpl,
		"template/formation.tmpl",
	)
}

func template_formation_tmpl() (*asset, error) {
	bytes, err := template_formation_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "template/formation.tmpl", size: 15341, mode: os.FileMode(420), modTime: time.Unix(1428963537, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/formation.tmpl": template_formation_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"template": &_bintree_t{nil, map[string]*_bintree_t{
		"formation.tmpl": &_bintree_t{template_formation_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

